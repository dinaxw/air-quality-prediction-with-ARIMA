# -*- coding: utf-8 -*-
"""ARIMA 5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zt7aw9ZqD5XuLM8xOksPhtvrvbNWGZkb

#Import Library:
"""

import pandas as pd
import numpy as np

#library untuk visualisasi
import matplotlib.pyplot as plt

#library untuk analisis timeseries
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

#library yang digunakan untuk forecasting ARIMA
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error

"""#Collecting Data Set:

Reads data from an Excel file and displays the first five rows and basic information about the dataset.
"""

df=pd.read_excel('/content/CO2 dataset.xlsx')
df.head()

df.info()

"""#Transform Data Time:


* Transforms the 'Year' column into a datetime data type.
* Make the 'Year' column an index.
* Sets the frequency of the annual time series ('YS')




"""

df['Year'] = pd.to_datetime(df['Year'], format='%Y')

df.set_index(['Year'], inplace = True)

df.head()

df.index.min(), df.index.max()

if (df.index.max() - df.index.min()==214):
  print('Data is Continous')

df.index.freq = 'YS'

"""# Time Series:

"""

df.plot(grid=True)

"""#Train & Test Split:
* Split the data into training and testing sets.


"""

train_df = df.loc[:'1991-01-01']
test_df = df.loc['1992-01-01':]

"""#Dickey-Fuller test

* Perform the Dickey-Fuller test to determine time series stationarity.
Augmented Dickey-Fuller (ADF) test to test time series stationarity
"""

def adf_test(timeseries):
  print ('Hasil Testing Dickey Fuller')
  print ('---------------------------------')
  adftest = adfuller(timeseries)
  adf_output = pd.Series(adftest[0:4], index=['Test statistic', 'p-value', 'Lags Used', 'Number of Observation Used'])
  for key, Value in adftest[4].items():
    adf_output['Critical Value (%s)' %key] = Value
  print (adf_output)

adf_test(df.values)

"""#Differencing:
* Perform differentiation on time series to make them stationary


"""

diff_df = df.diff()
diff_df.head()

diff_df.dropna(inplace=True)

diff_df.plot(grid=True)

"""#Autocorrelation Function (ACF) and Partial Autocorrelation Function (PACF):



* Perform the Dickey-Fuller test and display the autocorrelation (ACF) and partial autocorrelation (PACF) functions of the differentiated data.


"""

adf_test(diff_df)

plot_acf(diff_df)
plot_pacf(diff_df)

"""#ARIMA modelling:


* Build an ARIMA model with the order (p, d, q) specified in the order parameter.
* Generate predictions for training and testing data.
"""

ar = ARIMA(train_df, order=(15,1,15)).fit()
ar_train_pred = ar.fittedvalues
ar_test_pred = ar.forecast(23)

"""#Model Evaluation and Metrics:

* Display plots of training and testing data and model predictions.
* Mean Absolute Percentage Error (MAPE).
"""

train_df['CO2'].plot(style='--', color='gray', legend=True, label='train_df')
test_df['CO2'].plot(style='--', color='r', legend=True, label='test_df')
ar_test_pred.plot(color='b', legend=True, label='{Prediction}')

print('Train RMSE:', mean_squared_error(train_df, ar_train_pred)**0.5)
print('Test RMSE:', mean_squared_error(test_df, ar_test_pred)**0.5)
print('Train MAPE:', mean_absolute_percentage_error(train_df, ar_train_pred))
print('Test MAPE:', mean_absolute_percentage_error(test_df, ar_test_pred))